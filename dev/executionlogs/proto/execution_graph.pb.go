// Copyright 2022 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Protos that represent a complete graph of all executed spawns, actions that
// don't have spawns, and their performance metrics. Targets are composed of
// actions, and actions are composed of 0 or more spawns.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        (unknown)
// source: execution_graph.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Node is one entry in the executed graph.
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All nodes should have a description so human debuggers could see what was
	// going on in this step. This should be ActionAnalysisMetadata.prettyPrint().
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// The index is a unique (within a single build) but arbitrary identifier for
	// this node. The same node will likely have different indexes across builds.
	// For performance reasons, the set of all indexes in a build should be dense.
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// The target name. The field is not set if a spawn or action is shared
	// between multiple targets or if it doesn't belong to any target. Note that a
	// target can trigger several spawns, that can run in parallel or in sequence.
	TargetLabel string `protobuf:"bytes,3,opt,name=target_label,json=targetLabel,proto3" json:"target_label,omitempty"`
	// The spawn or action mnemonic. For example, Javac, GoLink, TestRunner, etc.
	Mnemonic string `protobuf:"bytes,4,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	// The rule class for the above target. Examples: java_test, cc_library, etc.
	RuleClass string   `protobuf:"bytes,10,opt,name=rule_class,json=ruleClass,proto3" json:"rule_class,omitempty"`
	Metrics   *Metrics `protobuf:"bytes,5,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// A list of node indexes corresponding to direct dependencies of this
	// node.
	DependentIndex []int32 `protobuf:"varint,6,rep,packed,name=dependent_index,json=dependentIndex,proto3" json:"dependent_index,omitempty"`
	// The name of the spawn runner that ran the spawn, if applicable.
	Runner string `protobuf:"bytes,7,opt,name=runner,proto3" json:"runner,omitempty"`
	// Details about the runner.
	RunnerSubtype string `protobuf:"bytes,8,opt,name=runner_subtype,json=runnerSubtype,proto3" json:"runner_subtype,omitempty"`
	// A node index that this is a retry of. For example, the second attempt of
	// a flaky test would point to the first attempt, and the third attempt would
	// point to the second.
	RetryOf *int32 `protobuf:"varint,9,opt,name=retry_of,json=retryOf,proto3,oneof" json:"retry_of,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_execution_graph_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_execution_graph_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_execution_graph_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Node) GetTargetLabel() string {
	if x != nil {
		return x.TargetLabel
	}
	return ""
}

func (x *Node) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *Node) GetRuleClass() string {
	if x != nil {
		return x.RuleClass
	}
	return ""
}

func (x *Node) GetMetrics() *Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Node) GetDependentIndex() []int32 {
	if x != nil {
		return x.DependentIndex
	}
	return nil
}

func (x *Node) GetRunner() string {
	if x != nil {
		return x.Runner
	}
	return ""
}

func (x *Node) GetRunnerSubtype() string {
	if x != nil {
		return x.RunnerSubtype
	}
	return ""
}

func (x *Node) GetRetryOf() int32 {
	if x != nil && x.RetryOf != nil {
		return *x.RetryOf
	}
	return 0
}

// Metrics contains all the timing metrics about a Node.
type Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time when the node started, as milliseconds from the Unix epoch.
	StartTimestampMillis int64 `protobuf:"varint,1,opt,name=start_timestamp_millis,json=startTimestampMillis,proto3" json:"start_timestamp_millis,omitempty"`
	// How long did this node last. This should be the sum of all the parts
	// below, but is included separately to identify issues when that's not true.
	DurationMillis       int32 `protobuf:"varint,2,opt,name=duration_millis,json=durationMillis,proto3" json:"duration_millis,omitempty"`
	ParseMillis          int32 `protobuf:"varint,3,opt,name=parse_millis,json=parseMillis,proto3" json:"parse_millis,omitempty"`
	FetchMillis          int32 `protobuf:"varint,4,opt,name=fetch_millis,json=fetchMillis,proto3" json:"fetch_millis,omitempty"`
	NetworkMillis        int32 `protobuf:"varint,5,opt,name=network_millis,json=networkMillis,proto3" json:"network_millis,omitempty"`
	UploadMillis         int32 `protobuf:"varint,6,opt,name=upload_millis,json=uploadMillis,proto3" json:"upload_millis,omitempty"`
	ProcessMillis        int32 `protobuf:"varint,7,opt,name=process_millis,json=processMillis,proto3" json:"process_millis,omitempty"`
	SetupMillis          int32 `protobuf:"varint,8,opt,name=setup_millis,json=setupMillis,proto3" json:"setup_millis,omitempty"`
	ProcessOutputsMillis int32 `protobuf:"varint,9,opt,name=process_outputs_millis,json=processOutputsMillis,proto3" json:"process_outputs_millis,omitempty"`
	QueueMillis          int32 `protobuf:"varint,10,opt,name=queue_millis,json=queueMillis,proto3" json:"queue_millis,omitempty"`
	DiscoverInputsMillis int32 `protobuf:"varint,14,opt,name=discover_inputs_millis,json=discoverInputsMillis,proto3" json:"discover_inputs_millis,omitempty"`
	// Total time spent on failed attempts.
	RetryMillis int32 `protobuf:"varint,11,opt,name=retry_millis,json=retryMillis,proto3" json:"retry_millis,omitempty"`
	// Mapping from error code to the time spent on attempts that failed with
	// that error.
	RetryMillisByError map[int32]int32 `protobuf:"bytes,12,rep,name=retry_millis_by_error,json=retryMillisByError,proto3" json:"retry_millis_by_error,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Time spent where we don't have more detailed information. This should be
	// just duration_millis minus all the other parts, but it is kept separately
	// to identify bugs in the code that produces the timing info.
	OtherMillis int32 `protobuf:"varint,13,opt,name=other_millis,json=otherMillis,proto3" json:"other_millis,omitempty"`
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_execution_graph_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_execution_graph_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_execution_graph_proto_rawDescGZIP(), []int{1}
}

func (x *Metrics) GetStartTimestampMillis() int64 {
	if x != nil {
		return x.StartTimestampMillis
	}
	return 0
}

func (x *Metrics) GetDurationMillis() int32 {
	if x != nil {
		return x.DurationMillis
	}
	return 0
}

func (x *Metrics) GetParseMillis() int32 {
	if x != nil {
		return x.ParseMillis
	}
	return 0
}

func (x *Metrics) GetFetchMillis() int32 {
	if x != nil {
		return x.FetchMillis
	}
	return 0
}

func (x *Metrics) GetNetworkMillis() int32 {
	if x != nil {
		return x.NetworkMillis
	}
	return 0
}

func (x *Metrics) GetUploadMillis() int32 {
	if x != nil {
		return x.UploadMillis
	}
	return 0
}

func (x *Metrics) GetProcessMillis() int32 {
	if x != nil {
		return x.ProcessMillis
	}
	return 0
}

func (x *Metrics) GetSetupMillis() int32 {
	if x != nil {
		return x.SetupMillis
	}
	return 0
}

func (x *Metrics) GetProcessOutputsMillis() int32 {
	if x != nil {
		return x.ProcessOutputsMillis
	}
	return 0
}

func (x *Metrics) GetQueueMillis() int32 {
	if x != nil {
		return x.QueueMillis
	}
	return 0
}

func (x *Metrics) GetDiscoverInputsMillis() int32 {
	if x != nil {
		return x.DiscoverInputsMillis
	}
	return 0
}

func (x *Metrics) GetRetryMillis() int32 {
	if x != nil {
		return x.RetryMillis
	}
	return 0
}

func (x *Metrics) GetRetryMillisByError() map[int32]int32 {
	if x != nil {
		return x.RetryMillisByError
	}
	return nil
}

func (x *Metrics) GetOtherMillis() int32 {
	if x != nil {
		return x.OtherMillis
	}
	return 0
}

var File_execution_graph_proto protoreflect.FileDescriptor

var file_execution_graph_proto_rawDesc = []byte{
	0x0a, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x02, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x22, 0xc9, 0x05, 0x0a, 0x07, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x12, 0x67, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x42, 0x79, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x42, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x1a, 0x45, 0x0a,
	0x17, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x42, 0x79, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_execution_graph_proto_rawDescOnce sync.Once
	file_execution_graph_proto_rawDescData = file_execution_graph_proto_rawDesc
)

func file_execution_graph_proto_rawDescGZIP() []byte {
	file_execution_graph_proto_rawDescOnce.Do(func() {
		file_execution_graph_proto_rawDescData = protoimpl.X.CompressGZIP(file_execution_graph_proto_rawDescData)
	})
	return file_execution_graph_proto_rawDescData
}

var file_execution_graph_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_execution_graph_proto_goTypes = []interface{}{
	(*Node)(nil),    // 0: executionlogs.proto.Node
	(*Metrics)(nil), // 1: executionlogs.proto.Metrics
	nil,             // 2: executionlogs.proto.Metrics.RetryMillisByErrorEntry
}
var file_execution_graph_proto_depIdxs = []int32{
	1, // 0: executionlogs.proto.Node.metrics:type_name -> executionlogs.proto.Metrics
	2, // 1: executionlogs.proto.Metrics.retry_millis_by_error:type_name -> executionlogs.proto.Metrics.RetryMillisByErrorEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_execution_graph_proto_init() }
func file_execution_graph_proto_init() {
	if File_execution_graph_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_execution_graph_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_execution_graph_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_execution_graph_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_execution_graph_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_execution_graph_proto_goTypes,
		DependencyIndexes: file_execution_graph_proto_depIdxs,
		MessageInfos:      file_execution_graph_proto_msgTypes,
	}.Build()
	File_execution_graph_proto = out.File
	file_execution_graph_proto_rawDesc = nil
	file_execution_graph_proto_goTypes = nil
	file_execution_graph_proto_depIdxs = nil
}
